import Cocoa

var str = "Hello, playground"

// MARK: Part 1 Example

struct Treeline {
    enum Error: Swift.Error {
        case unexpectedCharacter(Character)
    }
    
    let row: [Bool]
    
    init(_ string: String) throws {
        self.row = try string.map { character -> Bool in
            if character == "." {
                return false
            } else if character == "#" {
                return true
            } else {
                throw Error.unexpectedCharacter(character)
            }
        }
    }
}

do {
    let test = try Treeline("..##.......")
} catch {
    error
}

let exampleInput = """
..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#
"""

let exampleArray = exampleInput.split(separator: "\n").map { String($0) }

let exampleTreeLines = try! exampleArray.map { try Treeline($0) } // Known to succeed

var x = 0
var treeCount = 0

for line in exampleTreeLines {
    let adjustedX = x % line.row.count
    let isATree = line.row[adjustedX]
    if isATree { treeCount += 1 }
    x += 3
}

treeCount // 7 (correct)

// MARK: Part 1 Challenge

let challengeInput = """
.#..........#......#..#.....#..
....#.............#.#....#..#..
.....##...###....#..#.......#..
.#....#..#......#........#.....
.#.........###.#..........##...
...............##........#.....
#..#..........#..##..#....#.#..
....#.##....#..#...#.#....#....
...###...#............#.#......
#.........#..#...............#.
#.#...........#...............#
..#.#......#..###.#...#..##....
.....#..#..#..#............#...
......#.......#.....#....##....
#......#...#.......#.#.#.......
...........##.#.............#..
.#.........#..#.####...........
..#...........#....##..........
#...........#.......#..#.#.....
.....##...#.....#..##..#..#....
#.#..........................#.
##.....#..........#.......##..#
....#..#............#.#.#......
.......#.......#..#............
...#.#..........#..#.....#.....
.....#...##..##.....##........#
.#.....#........##............#
..#....#.#...#.....#.##........
........##.....#......##...##..
......#..................#.....
..##......##.....##...##.......
......#..#...##......##........
.#..#..#.#.....................
.#....#.#...#....#.......##...#
.####.#..##...#.#.#....#...#...
.#....#.....#...#..#.........##
...........#.#####.#.#..##..#..
.#......##...#..###.#.#....#...
...#.....#........#..###...#...
.......#................##.#...
.##...#.#..................#...
..#........#....#..........#..#
..#.........#..................
...#.#..........#.#..##........
...#.##..........##...........#
...........#..#........#.......
.#....#.#...........#....#.##..
.#...#..#............#....#.#..
...#..#...#.........####.#.#...
..#...#...........###..#...##.#
......##...#.#.#....##....#....
#..#.#.....##....#.......#...#.
.#.....#.....#..#..##..........
................#.#.#...##.....
.#.....#............#......#...
...#...#..#.#....######.....#..
..#..........##......##.....#..
......#..#.##...#.#............
....#.......#..#...#..#.#......
#......##.#..#........#.....#..
..#.........#..#.........#.....
..#.........##.......#.#.#..##.
...#....##.................#.#.
...#........##.#.......#.##..##
....#.#...#...#....#...........
.........#....##........#......
...#........#..#.......#...#...
#.......#....#...#...........#.
.......#......#...##...........
.#.#......##.#.......#..#...#..
.#.....##.#...#......#..#......
........#.............#.#..#..#
#...........#....#.....#.##.#.#
................#...#........##
#..#.##..#.....#...##.#........
#.....#.#..##......#.#..#..###.
....#...#.....#................
......#...#..##...........#....
......#.........##.#...#......#
#...#.#.....#..#.#..#..#......#
...#.#..#..#.#........###.#....
..#...#.......#.#.......#......
...#....#.....#.......#......#.
#...........#....#..#..#.......
..........##......##.........##
##............#..#.#...#..#.#..
..#.##....##...##..#...#.......
............##.##..###..#..#...
......#....##...##.........#...
......#..#.#......####..#......
..............#....#..#..##....
...#.#..#...##.#.......#.#.....
...#.#....#.......#..#..#..##..
..........#.........#..........
...#.....#............#.....##.
....#.#......................#.
.........#...#.#...#...........
...#........#..##.....#...#.#..
......##.....#.#..#...###.#...#
#....#..#.#.....#...#..........
.#.##.###.........#..##.#....#.
#.........#....#........#...#..
...........#...............#..#
###....................#....#..
.................#....#.....#..
..........#.........#.......#..
........#..#....#.....##.......
#...##.#...#.#.#............#..
....#.........##.#.#..#...###..
.##..............#...#.....##.#
###...#..................#...#.
.....#..#...#..#...#...........
.#.................#...#..#..#.
.#.........###...#.##......###.
.####............#......#..#...
....#........#..#.#....#..##..#
..#....#.#...#.#.....##....#...
..###..#..#....##....#..#..#...
...#.#.....#.#....#.....#......
.....#..........#.#............
.......#...........#.#..#..#...
......##........#.....#.......#
..#.#.....##............#..##..
....#.#........#...........##..
#......#..##........#.....#....
#...#...###..............##....
#..#........#........#.....##.#
......##.####........#..#....#.
...##..#.##.....#...#...#..#...
#..............###.##..##......
......................#.....#..
.........#.#.......#...##.#....
....#......#..........###..#...
#...####.#.................#..#
##.#....#....#.....##..#....#.#
..#.....#..##.........#.#..#.#.
.....#.....#...................
#....##.#.........###....#.....
#........#.#.......#.#.........
.##.#...#.....#...#.......##.##
#..#.............#.............
..........#.........####.......
..##..............#..#.#.......
..#.#.....#........#......##...
#.#.......#.#................#.
.#...#........#....##....#.##..
.#..#...#...#......#.#.........
......##............#.........#
.#....#.#.#.........#..#..##...
#....#......#.......###........
.......#........##..#...#..###.
#.##..........#..###..#..#.#...
.#..#....#..........#.#.##.....
#..#...#.#...#..#..#.#...#.....
.........#...#.#............#..
#..#.............#......##.##..
...##.......#..................
....#......#...#.....#......#..
.....##..#......#....#....#....
....#...#...#...#.....#........
.#....#........##....#..#.#...#
#.......#..#......#......#...#.
..............#......#......#..
#......#..##...#........#....#.
#..#..#..#.....#..#........#...
#...#.....#...#..........#...##
........#.......#...#.....#.#..
...................##.......#..
.#......#........#.##..#....#..
.....#.....#...#..#..#......#..
........##.#..##.........#....#
.........#.......#.............
............#.###.###..#.#.....
.............#....#...........#
..#.....#.#..##.##........#....
...#....#....#.........#.....#.
.#............#......#.........
..#.#..........##.##......#.#..
....#.........................#
..........##...................
#.......#.#..............#...#.
...##..#..##...##.#..#.#.#.....
...########.#..##....#.........
##.#........##.....#........#..
#.#.....#........#..#....#...#.
..#............#.......###.##.#
#.#............................
...#.#.#....#..........#..#....
..###.#.....#.#..#.............
#........#..........#.#..#.....
...........#..#....#.........#.
..#............#.....#.#.......
#.#............#..#.....#.#.#..
...#...#.......................
.#.#.#...##.............#..#..#
..#.........#..#.....##....##..
.#...#............#.......#..##
....#..#.#.#...####............
#.......#....#..##....##....#..
.....##.#....#.#..#.......#....
...........#.......#....##.#.##
..........#...#....##...#.#....
..#.............#.............#
....#..#.....#....#.#..###.#...
.......#.##.#......#...##...#.#
.#..#.#..#.#.......#....###.#..
#..........##...##.........##..
##..#......##.#.####.#.....#...
....#.#...#........#..##..#.#..
.#.............................
.##..#.#...##.....#....#.....#.
..##.........#......#.........#
.#.#........#...#.#.#....##....
.#.................##.........#
...#...............#....#......
..#...#..#..........###..#...##
..........#..#..........##..#..
...#.............#.##.#...#....
...#...........#...............
......#.........##.#...#...#...
...#.#........#..#.....#..#...#
#.#...#....##...#.....#....#...
#.#.#..#.....#.........#.......
##...........#..####...........
#..........#........###...#..#.
#..#.......#....#......###.....
..#.....#......#.###......##...
...#.##..#............#...#....
.##........#.....#.............
#....#.##..#...........##.#.#..
..#.....#.#....#.......#......#
#..#.......#............#......
#.......##....#...#..#.........
.................#..##.........
..............#..#..#.##.......
#.#.......................#..#.
..#..##...........#....#..#..#.
...#....#.......#.......#....#.
.....#.#..#.#.....#.........#.#
..#.#.........#.....#..........
...#.#.#.......#.#.......#.#..#
...##...#.#.#.....#.....##....#
##.......#.#.#.#.......#...##..
....#.#...........#......#.....
.#.....#........####...........
#......#........#.....#..#..#..
..#..#......#...##.......#....#
#........#..........#.....#.#..
.#...........#.....#.....#.....
..........#..#...#....#....##..
.....#.#..........#.....##..#..
......#.........##.............
..#..#.....##......##........#.
.#.#.#.#..#.#..#.......#.......
#.#...####.#.#....#.#........#.
....#...#.....#......#..##.....
##.........#.........#..#.#..#.
..#.#........#.#........#.##...
#....#......#...#....#.........
.##.............###....###.#...
..##.#.......#...#..#......#...
.....#.##..................#...
.....#.#...#..#................
........#..#..#...........#.#.#
....#.###.....#..#.#.....##..##
....##.#.........#..##.........
.##........#......#..###..#.##.
.........##...............#.##.
..#...............#.#...#..#.#.
....#....##.....#...#..#.....#.
#...#.....................#....
.....#.#............#...##.#.#.
...#......#.......#........##.#
.#.#..#.#....#.##.......##....#
.........#...#..##.........#...
.#...#..#....................#.
.......#...#........#.#..#.#.##
.#.............#......#..#.#...
............##.........#....#.#
#.........##..##...............
.#.#....#.#..#..........##.....
..###...#..#.#.......#..#...##.
.....#....#.#............##.#..
##.....#.#..#..#...............
...##...#......#....#..#..#....
.............#....#..#..##...##
#.......#............#....##..#
..#.##.....#.......#....#....#.
..........#...#.............###
..#....#.#..................#..
#.#...#..#...........#.........
....##..#..##..#..........#....
#...#...#.#....#.##...#.......#
#......##.#...##..#.....#......
....#.......#.#............#...
#....#...........###...........
#..#...#...#......#.#..#.......
...............................
#........##.............#.#....
.............#........#....#.##
........##.####.....##..#......
#.#.#.#.......##....##.....#...
.......#..##..#...#............
..........#...#....#..#.#.#.##.
...#........##....#...#........
#..#.##....#....#........#.....
.##...#.....##...#.............
.#...#..#.#.....#.##.....#.....
...........#.............#...#.
.#..#................#...#..#..
#..........#......##..##....#..
####..#...........#.#....#.....
..#.#.##..#...##........#....##
.#.......##........#.....#.....
............#................#.
.#...#...#.....#.#....#.##..#..
..#.............#.#....#.#.....
..............#...........#....
..............#........#....#..
..........##........#..#...#...
...#.#....#.#....#..#.....#...#
..#......#...........#..#..#.#.
.....##.....#.####....#........
"""

let challengeArray = challengeInput.split(separator: "\n").map { String($0) }

func treeCount(right: Int, down: Int, trees: [Treeline]) -> Int {
    var x = 0
    var y = 0
    var treeCount = 0
    
    while y < trees.count {
        let line = trees[y]
        let adjustedX = x % line.row.count
        let isATree = line.row[adjustedX]
        if isATree { treeCount += 1 }
        x += right
        
        y += down
    }
    
    return treeCount
}

let challengeTreeLines = try challengeArray.map { try Treeline($0) } // Known to succeed

/*
 var x = 0
 var treeCount = 0
 
 for line in treeLines {
 let adjustedX = x % line.row.count
 let isATree = line.row[adjustedX]
 if isATree { treeCount += 1 }
 x += 3
 }
 
 treeCount // 247 (correct)
 */

treeCount(right: 3, down: 1, trees: challengeTreeLines) // Also 247 (still correct

// MARK: Part 2 Example

let one = treeCount(right: 1, down: 1, trees: exampleTreeLines)
let two = treeCount(right: 3, down: 1, trees: exampleTreeLines)
let three = treeCount(right: 5, down: 1, trees: exampleTreeLines)
let four = treeCount(right: 7, down: 1, trees: exampleTreeLines)
let five = treeCount(right: 1, down: 2, trees: exampleTreeLines)

let product = one * two * three * four * five // 336 (correct)

// MARK: Part 2 Challenge

let oneC = treeCount(right: 1, down: 1, trees: challengeTreeLines)
let twoC = treeCount(right: 3, down: 1, trees: challengeTreeLines)
let threeC = treeCount(right: 5, down: 1, trees: challengeTreeLines)
let fourC = treeCount(right: 7, down: 1, trees: challengeTreeLines)
let fiveC = treeCount(right: 1, down: 2, trees: challengeTreeLines)

let productC = oneC * twoC * threeC * fourC * fiveC // 2983070376 (correct)

